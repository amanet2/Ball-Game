* GENERAL: make a givewaypoint function that will work like the givedecoration
    -> dont need waypoint in netstate afterward
* GENERAL: think about how prefabs are placed
    -> option 1: have comms for "putprefab" and "deleteprefab" to the effect that executed on each machine w/out server routing
        -> this makes prefab appear and disappear instantly
            -> server and clients need same prefab files
    -> option 2: have server receive deleteprefab and putprefab requests and route via the base putblock and deleteblock
        -> this is slower but less special code and it supports custom prefabs
            -> I like this one better for this reason
    -> option 3: leave as is (deleteprefab needs no work)
        -> we have slow putprefab and fast deleteprefab
    -> should server tell clients which prefabs are available? or can clients bring their own prefabs?
* GENERAL: increase map streaming speed by batching lines (see commented code in sendmap)
* NET: why does ui show client not communicating at full 30hz
* BUG: teleporters delay affects different colors i.e. blue teles are affected by red tele delay and vice versa
* FEATURE: handle "removeplayer" instead of "killplayer" so that leaving/mapmaker stuff works same as dying currently
* FEATURE: need to take code from handlekill to drop weapon and use it in new sv_ script
    -> then we will call this script when picking up new weapons with the delay
* FEATURE: support block statements in scripts
* SANITY: how the hell is the launcher explosion's velocity being set?
* WEAPONS: make multiple bullet classes like we have for weapons
    -> we can customize these projectile's properties in a cfg
    -> in the cfg files, we will reference the bullet we want to come out of a weapon
        -> e.g. setvar WEAP_LAUNCHER_projectile PROJECTILE_ROCKET
        -> e.g. setvar WEAP_SHOTGUN_projectile PROJECTILE_SHOTGUN
        -> e.g. setvar PROJECTILE_SHOTGUN_spread 5
* STABILITY: Watch out for weird error of null item from queue in checkitems
* STABILITY: make sure we're not iterating over maps of objects
    -> get keys of object map
    -> have function take id and return hashmap of vars (copy of object vars if available)\
    -> looks like an example of this is how we update players in gameLogicCli/Srver kinda
* CRASH: concurrent modifications with multiple threads and game objects
    -> drawing, deleting, adding, moving
    -> need to draw out threads in diagram
* create a client var for player id to track with the camera
    -> can move an invisible item for the camera to track?
* camera should track without its xy being explicitly tied to user player
    -> user player will be as smooth as the network, which is not very
* create onShot script capability for items and players when they get hit by bullet object
* fix the bug where players pop out on top of walls they shouldnt be visible behind
* look into getting rid of unneeded linked hashmap in gScene. also other linked lists
* replace all usages of "Math.Random()" with threadlocal random
* create ban system using timeevents and saving timestamps to a file on close and loading
    -> on server start, check for unban vars in config file, load ids into ban map
    -> loop: check if any ban times have expire and remove player from ban map
    -> console command: banid will schedule the event to unban (remove from list of banned ids) and create svar
    -> on server close, save to file: setvar unban_<id> <time_millis>
* make a "iscolliding" console comm with 2 ids for objects
* convert cClientLogic.newprefabname into client var so console and onChange() can be used
* dont draw blocks that cant be seen on screen
* when someones pc sleeps/closes, the client loses connection then rejoins on wake as "null"
* change the client rate when downloading map
* fix memory leaks if any
* make it so you have separate "waypoint-WITH-arrow" and "waypoint-WITHOUT-arrow"
* git reset --hard <last_working_commit_id>
    -> git push --force
    -> git push --set-upstream origin <branch_name> --force
    -> see for remotes: git reset --hard origin/<branch_name>
* NET: Have server not send any other clients' vars if the client is still loading
* NET: The maximum safe UDP payload is ??? bytes
* add zombies gametype, a zombie will be a prop
* powerup idea
    -> egg, pick up to initiate the growing sequence
    -> chuck or drop it before it blows
* ATTACK: the rock from gungame
    -> have it be wildly inaccurate
* GAME: bring back squish effect for something
* new Item: bonusblock
    -> get its health to 0 and it has a chance to spawn a powerup
* Interesting attack:
    -> hold mouse to increase size of projectile
    -> click mouse to start blowing up a bubble. click again to launch it before it pops
        --> can get a bigger bubble, skillfully make small ones etc
* other attack:
    -> rock lazily flies for a time
        --> stopped/bounces by walls/players
    -> explodes on a timer
    -> right click could leave a bomb at player loc, left click launches it
* can make "themes" for prefabs
* make players bounce off each other and walls in a satisfying way
* add ball skins like polka dots stripes etc
    -> use existing color architecture
* COMMIT SPOT CHECKS
    -> GO TO COMMIT: git checkout <commit>
    -> GO BACK: git checkout <branch_name>
* make sure different timezones and computer times work correctly
* BG MUSIC TRACK/PLAYING CLIPS NEED TO CHANGE VOLUME IMMEDIATELY ON CHANGE
* gungame mode
* add "disable attacks" option
* checksum checks
    -> client sends checksum of the jar, map file, and scripts currently played
    -> server verifies these MD5 hashes against its own md5s
* make players eyes blink
* Create a server browser program
* add voip