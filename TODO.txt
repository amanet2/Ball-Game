* BUG: scrolling through console lines doesnt work
* CONSOLE: need ability to refresh scripts while running app
    -> IDEA #1: refresh scripts when loading map
        -> this avoids situation where we try to refresh a script but it is running
    -> IDEA #2: console command to refresh scripts
        -> what if script is running when we try to refresh it?
* ENGINE: see if bullet despawning can be converted to scheduled event
* SCRIPT: handledestroyplayer and handledeleteplayer should be combined
* BOTS: come up with scriptable system for bots
    -> some commands: targetitem (will seek and pick up), targetplayer (will seek and attack)
* ENGINE: use player (and thing in general) "coords" instead of serparate coordx and coordy stuff
* NETWORK: add retry limit to gamelogicclient so we disconnect and cl_echo when remote server becomes unreachable
* GIT: want to go back in time
    -> git checkout <old working commit>
    -> git checkout -b <new branch>
    -> push this branch
        -> retarget the older branch into this new stable branch, stable branch targets main now
* TWO COMMITS TANGLED UP
    -> on target: git config pull.rebase true && git pull && git config pull.rebase false
* BUILD: current steps
    -> compile java into .class files
    -> jar archive these files
    -> call jar with jdk java
    -> move all pkg and bin files into a dir for distributing
    -> Executing: .exe that calls java (.c) -OR- .bat that calls java
        -> manually edit the internal system call in .c file when compiling into mapmaker exe
* ENGINE: think about whether net threads should have 'update' be called or 'render'
    -> one is in a while loop while syncing with current time, other is called after sync
* Engine: xCon console should be split up into server and client
* BUG: Escape comma ',' characters that appear in net values
    -> it screws up building hashmap from received data
* IDEA: multi-line for loops in scripting language
    -> QUESTION: am i making a game here or a scripting language???
    -> iterate over lines in gScript
    -> "for" should trigger a function that gets all line #'s of the script to loop over
    -> we can pass all loop lines to a function which then does the for i in range code in java
    -> when the forloop delegate completes, we jump ahead the parent script iterator by X lines
    -> remember to properly parse and fill in args and global variables for each line in loop
        -> same code as we currently have in gScript
* GENERAL: cl_setthing executing on server thread (bad)
    -> if a client is also running the server, cl_setthing can be called by the server if server not ignored
* GENERAL: think about how prefabs are placed
    -> current state: client requests "exec_"
        -> client requests server to "exec prefabs/X", server fans-out "cl_putblock" lines (no client custom prefabs supported)
            -> client does not get prefabs selection from server, so client needs same prefabs the server has
        -> client requests server to "deleteprefab", server fans-out "cl_deleteprefab" (instant, OK)
    -> option 1: have comm for "putprefab" to the effect that executed on each machine w/out server routing
        -> this makes prefab appear and disappear instantly
            -> server and clients need same prefab files (already the case)
    -> option 2: have client request "putblock" for each individual block in local prefab file
        -> even slower but does not require requesting "exec prefabs/X" and it supports client-custom prefabs
            -> clients might put malicious script calls into prefabs, like playing sounds
                -> we can ignore lines that arent "putblock" or "getres" (possibly malicious script after getres???)
* GENERAL: increase map streaming speed by batching lines (see commented code in sendmap)
* BUG: teleporters delay affects different colors i.e. blue teles are affected by red tele delay and vice versa
* WEAPONS: make multiple bullet classes like we have for weapons
    -> we can customize these projectile's properties in a cfg
    -> in the cfg files, we will reference the bullet we want to come out of a weapon
        -> e.g. setvar WEAP_LAUNCHER_projectile PROJECTILE_ROCKET
        -> e.g. setvar WEAP_SHOTGUN_projectile PROJECTILE_SHOTGUN
        -> e.g. setvar PROJECTILE_SHOTGUN_spread 5
* STABILITY: Watch out for weird error of null item from queue in checkitems
* STABILITY: make sure we're not iterating over maps of objects
    -> get keys of object map
    -> have function take id and return hashmap of vars (copy of object vars if available)\
    -> looks like an example of this is how we update players in gameLogicCli/Srver kinda
* create a client var for player id to track with the camera
    -> can move an invisible item for the camera to track?
* camera should track without its xy being explicitly tied to user player
    -> user player will be as smooth as the network, which is not very
* create onShot script capability for items and players when they get hit by bullet object
* fix the bug where players pop out on top of walls they shouldnt be visible behind
* replace all usages of "Math.Random()" with threadlocal random
* create ban system using timeevents and saving timestamps to a file on close and loading
    -> on server start, check for unban vars in config file, load ids into ban map
    -> loop: check if any ban times have expire and remove player from ban map
    -> console command: banid will schedule the event to unban (remove from list of banned ids) and create svar
    -> on server close, save to file: setvar unban_<id> <time_millis>
* dont draw blocks that cant be seen on screen
* when someones pc sleeps/closes, the client loses connection then rejoins on wake as "null"
* change the client rate when downloading map
* git reset --hard <last_working_commit_id>
    -> git push --force
    -> git push --set-upstream origin <branch_name> --force
    -> see for remotes: git reset --hard origin/<branch_name>
* NET: Have server not send any other clients' vars if the client is still loading
* NET: The maximum safe UDP payload is ??? bytes
* add cod zombies-style gametype, a zombie will be a prop with dumb ai
* powerups
    -> an egg you pick it up and it expands until explosion
* GAME: bring back squish effect for movement/momentum changes and bounces
* new Item: destructible box/crate
    -> get itemvar "health" to 0 and it should exec spawnpointgiverbonus script
* other attacks:
    -> rock lazily flies, either bounces or stops when collides with walls/players (rock from maniac gungame)
    -> right click could drop a timed bomb, left click kicks it forward
    -> hold mouse to blow a bubble and release it before it pops
* make "themes" for prefabs
* make players bounce off each other and walls
* COMMIT SPOT CHECKS
    -> GO TO COMMIT: git checkout <commit>
    -> GO BACK: git checkout <branch_name>
* PLAYING CLIPS NEED TO CHANGE VOLUME IMMEDIATELY ON CHANGE
* gungame mode
* add "disable attacks" option
* make players eyes blink
* Create a server browser program w/ flask or something
* add voip