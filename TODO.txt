* PY SCRIPTING
    -> have different kinds of json payloads to send to python
        -> one payload will be game state (clients, hps, etc)
        -> another could be map state (blocks, collisions, items, etc)
        -> check the buffer limit of python process and see if it can work with both?
            -> or save the player/game state and map states in cases where we need to check one for the other
                -> e.g. players dropping items, or map points teleporting players
        -> look at all our scripts so far and see how they _could_ work with python
        -> e.g. if map state returns and there are new/changed items, blocks they would be spawned in
    -> scheduleevent
        -> instead of calling "ex", start a "pyInput.write..." loop
    -> have multiple py scripts
        -> java enqueues scheduled events to pass to python event script
        -> there is also the "checkgamestate" pyscript
* CLEANUP:
    -> investigate exceptions
    -> create console command to pause bots
        -> sSettings.botsSleep
    -> Fix the teleporter seemingly not letting players go back through
* COMMANDS:
    -> server var to not allow movement for ID or all
    -> bots to be able to target item of chosen type
        -> bots should have state
    -> server var to not allow movement for ID or all
    -> bots to be able to target item of chosen type
        -> bots should have state
            -> rest
            -> seek (player|item) // seek any items of a type, or players
                -> seek (player|item) id //seek player/item with id
            -> avoid (player|item)
                -> see 'seek'
    -> add race gamemode
* BOTS: looks like the engine and scripts are fighting each other when we want to manipulate bots in script
    -> save what we have now for a "bouncyball" type object
    -> make it bounce off walls then come up with new system
* GAMETYPE: bounce the bot into the flagdeposit
    -> botplayer doesn't do anything except get bounced around
    -> engine will have to detect collision between BOTPLAYER and items like players are
    -> botplayer should have a var created in the script called "collidedplayer" (DONE)
    -> if botplayer collided with flagdeposit give a point to item "collidedplayer" and delete the item
        -> schedule a new BOTPLAYER to spawn in at a random spawnpoint
* ITEMS: looks like items may need to be syncd on client and server
    -> we want the server to be able to send custom items to clients
    -> have fallbacks if sprite, script, flare fields are "null"
* FLASHLIGHT: adjust map brightness via: cl_setvar clrw_floorshading <r> <g> <b> <a>
* BOTS: since gItems can have coords, velocitys and stuff, make bots an ITEM object so they sync properly
    -> might need to move some vars from gPlayer to gThing so gItem (bot) can inherit things like collidingPlayer, etc.
* BOTS: implement them like doom
    -> pick target, default should be nearest player
    -> try this loop: aways go straight on or at random 45 degree offset
    -> update loop: find vector we can move to that gets us closer to player
    -> find direct vector to target
        -> if can move there, go there or 45 degree offset
        -> if can not move there, find dir you CAN move in and go
    -> engine should handle all bot stuff up to spawning, actions should be scripted
    -> commands: targetthing, avoidthing (for virus and flagmaster type modes), holdposition <millis>
    -> bots should automatically protect themselves shooting at players nearby
    -> how bots will be scripted (bringmaster as example):
        getres hasflag setnstate $1 flag
        testres $hasflag 1 targetthing $1 ITEM_FLAGDEPOSIT <millis>
        testres $hasflag 0 targetthing $1 ITEM_FLAG <millis>
    -> virusmaster example, should aggro everyone but sometimes go for teleporter
        (no virus)
        getres rando getrand 0 5
        testresn $rando 0 avoidthing THING_PLAYER <millis>
        testres $rando 0 targetthing ITEM_TELEPORTER <millis>
        (if we have the virus)
        getres rando getrand 0 5
        testresn $rando 0 targetthing THING_PLAYER <millis>
        testres $rando 0 targetthing ITEM_TELEPORTER <millis>
* NETWORK: add retry limit to gamelogicclient so we disconnect and cl_echo when remote server becomes unreachable
* CONSOLE: refresh scripts from disk when loading map
    -> verify scripts aren't running when map is loading
* SCRIPT: handledestroyplayer and handledeleteplayer should be combined
* GIT: want to go back in time
    -> git checkout <old working commit>
    -> git checkout -b <new branch>
    -> push this branch
        -> retarget the older branch into this new stable branch, stable branch targets main now
* TWO COMMITS TANGLED UP
    -> on target: git config pull.rebase true && git pull && git config pull.rebase false
* BUILD: current steps
    -> compile java into .class files
    -> jar archive these files
    -> call jar with jdk java
    -> move all pkg and bin files into a dir for distributing
    -> Executing: .exe that calls java (.c) -OR- .bat that calls java
        -> manually edit the internal system call in .c file when compiling into mapmaker exe
* ENGINE: think about whether net threads should have 'update' be called or 'render'
    -> one is in a while loop while syncing with current time, other is called after sync
* Engine: xCon console should be split up into server and client
* BUG: Escape comma ',' characters that appear in net values
    -> it screws up building hashmap from received data
* IDEA: multi-line for loops in scripting language
    -> QUESTION: am i making a game here or a scripting language???
    -> iterate over lines in gScript
    -> "for" should trigger a function that gets all line #'s of the script to loop over
    -> we can pass all loop lines to a function which then does the for i in range code in java
    -> when the forloop delegate completes, we jump ahead the parent script iterator by X lines
    -> remember to properly parse and fill in args and global variables for each line in loop
        -> same code as we currently have in gScript
* GENERAL: cl_setthing executing on server thread (bad)
    -> if a client is also running the server, cl_setthing can be called by the server if server not ignored
* GENERAL: think about how prefabs are placed
    -> current state: client requests "exec_"
        -> client requests server to "exec prefabs/X", server fans-out lines (no client custom prefabs supported)
            -> client does not get prefabs selection from server, so client needs same prefabs the server has
        -> client requests server to "deleteprefab", server fans-out "cl_deleteprefab" (instant, OK)
    -> option 1: have comm for "putprefab" to the effect that executed on each machine w/out server routing
        -> this makes prefab appear and disappear instantly
            -> server and clients need same prefab files (already the case)
    -> option 2: have client request "put" for each individual block in local prefab file
        -> even slower but does not require requesting "exec prefabs/X" and it supports client-custom prefabs
            -> clients might put malicious script calls into prefabs, like playing sounds
                -> we can ignore lines that arent "put" or "getres" (see previews)
* GENERAL: increase map streaming speed by batching lines (see commented code in sendmap)
* BUG: teleporters delay affects different colors i.e. blue teles are affected by red tele delay and vice versa
* create a client var for player id to track with the camera
    -> can move an invisible item for the camera to track?
* camera should track without its xy being explicitly tied to user player
    -> user player will be as smooth as the network, which is not very
* create onShot script capability for items and players when they get hit by bullet object
* fix the bug where players pop out on top of walls they shouldnt be visible behind
* replace all usages of "Math.Random()" with threadlocal random
* create ban system using timeevents and saving timestamps to a file on close and loading
    -> on server start, check for unban vars in config file, load ids into ban map
    -> loop: check if any ban times have expire and remove player from ban map
    -> console command: banid will schedule the event to unban (remove from list of banned ids) and create svar
    -> on server close, save to file: setvar unban_<id> <time_millis>
* dont draw blocks that cant be seen on screen
* when someones pc sleeps/closes, the client loses connection then rejoins on wake as "null"
* change the client rate when downloading map
* git reset --hard <last_working_commit_id>
    -> git push --force
    -> git push --set-upstream origin <branch_name> --force
    -> see for remotes: git reset --hard origin/<branch_name>
* NET: Have server not send any other clients' vars if the client is still loading
* NET: The maximum safe UDP payload is ??? bytes
* add cod zombies-style gametype, a zombie will be a prop with dumb ai
* powerups
    -> an egg you pick it up and it expands until explosion
* GAME: bring back squish effect for movement/momentum changes and bounces
* new Item: destructible box/crate
    -> get itemvar "health" to 0 and it should exec spawnpointgiverbonus script
* other attacks:
    -> rock lazily flies, either bounces or stops when collides with walls/players (rock from maniac gungame)
    -> right click could drop a timed bomb, left click kicks it forward
    -> hold mouse to blow a bubble and release it before it pops
* make "themes" for prefabs
* COMMIT SPOT CHECKS
    -> GO TO COMMIT: git checkout <commit>
    -> GO BACK: git checkout <branch_name>
* PLAYING CLIPS NEED TO CHANGE VOLUME IMMEDIATELY ON CHANGE
* gungame mode
* add "disable attacks" option
* make players eyes blink
* Create a server browser program w/ flask or something
* add voip