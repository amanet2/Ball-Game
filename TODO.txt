* after dying with weapon X cant pick up weapon X after respawning unless you pick up other weapon first
* rechargehealth might have an issue running if player is hit by landmine?
* create a client var for player id to track with the camera
    -> maybe items too
    -> can make an invisible item purely for the camera to trak
        -> move this tracked item around to move the camera?
* replace more java code with script
* camera should track without its xy being explicitly tied to user player
    -> user player will be as smooth as the network, which is not very
* some things like exploding on a mine can happen over and over when activated
* create onShoot script capability for items and players when they get hit by bullet object
* make prefabs not hardcoded
    -> create some cool rooms/runs and duplicate them
    -> bring back save as prefab button
        -> prefab manager should have a check for new files every so often
            -> maybe as a first check for selecting the prefab menu
            -> or even better in the 'putObject' command
* separate client and server gamemode variables
    -> will need for dedicated server
* fix the bug where players pop out on top of walls they shouldnt be visible behind
* create a new "exec" function for scripts
    -> should support block statements: if, for, while
* look into getting rid of unneeded linked hashmap in gScene. also other linked lists
* replace all usages of "new Random()" with threadlocal random
* convert banning/ban relief into a timeEvent
* make a "willcollide" console comm with 2 ids for objects
* convert cClientLogic.newprefabname into client var so onChange() can be used
* dont draw blocks that cant be seen on screen
* see what "checkX" functions we can get rid of/change to commands
    -> e.g. instead of checking colors, have a comm "changeplayercolor <id> <color>"
        --> playercolor is set by console command in halo's engine (in-game)
* when someones pc sleeps/closes, the client loses connection then rejoins on wake as "null"
* change the client rate when downloading map
* fix memory leaks if any
* make it so you have separate "waypoint-WITH-arrow" and "waypoint-WITHOUT-arrow"
* git reset --hard <last_working_commit_id>
    -> git push --force
    -> git push --set-upstream origin <branch_name> --force
    -> see for remotes: git reset --hard origin/<branch_name>
* NET: Have server not send any other clients' vars if the client is still loading
* NET: The maximum safe UDP payload is ??? bytes
* add zombies gametype, a zombie will be a prop
* powerup idea
    -> egg, pick up to initiate the growing sequence
    -> chuck or drop it before it blows
* ATTACK: the rock from gungame
    -> have it be wildly inaccurate
* GAME: bring back squish effect for something
* new Item: bonusblock
    -> (make them look like regular blocks)
    -> get its health to 0 and it has a chance to spawn a powerup
        --> powerups: small mode, big mode, shotgun(?), bigger rock, fire rate ++, health++
        --> this will be the powerup delivery system.  no placing shotties on map, etc
    -> will respawn after X time
* Interesting attack:
    -> hold mouse to increase size of projectile
    -> click mouse to start blowing up a bubble. click again to launch it before it pops
        --> can get a bigger bubble, skillfully make small ones etc
* other attack:
    -> rock lazily flies for a time
        --> stopped/bounces by walls/players
    -> explodes on a timer
    -> right click could leave a bomb at player loc, left click launches it
* can make "themes" for prefabs
* make players bounce off each other and walls like billiard balls
* add ball skins like polka dots stripes etc
    -> use existing color architecture
* cant have key bound to multiple actions
* COMMIT SPOT CHECKS
    -> GO TO COMMIT: git checkout <commit>
    -> GO BACK: git checkout <branch_name>
* make sure different timezones and computer times work correctly
* BG MUSIC TRACK/PLAYING CLIPS NEED TO CHANGE VOLUME IMMEDIATELY ON CHANGE
* gungame mode
* add "disable attacks" option
* checksum checks
    -> client sends checksum of the jar, map file, and scripts currently played
    -> server verifies these MD5 hashes against its own md5s
* make players eyes blink
* Create a server browser program
* add voip