* fix the bug where players pop out on top of walls they shouldnt be visible behind
* make the killing player process a script so it can be customized
    -> this is where we can script deathmatch-givepoint logic
* get rid of all the gamemode-related java code and have it in script
* you don't need to use stringbuilder to get subarrays
    -> looks at the foreach console commands
* create a new "exec" function for scripts
    -> should support block statements: if, for, while
* look into getting rid of unneeded linked hashmap in gScene. also other linked lists
* replace all usages of "new Random()" with threadlocal random
* convert banning/ban relief into a timeEvent
* make a "willcollide" console comm with 2 ids for objects
* make weapons a "hidden" thing with instances in a scene so we can check their variables in scripts for weapon usage
* try to see if putitem can only have x y and have it do cl_putitem with an assigned id
* VFX BUG: player sometimes appears in front of small tiletops
    -> try putting a few units of buffer when testing collision
* convert cClientLogic.newprefabname into client var so onChange() can be used
* dont draw blocks that cant be seen on screen
* see what "checkX" functions we can get rid of/change to commands
    -> e.g. instead of checking colors, have a comm "changeplayercolor <id> <color>"
        --> playercolor is set by console command in halo's engine (in-game)
* when someones pc sleeps/closes, the client loses connection then rejoins on wake as "null"
* change the client rate when downloading map
* low framerate on 1 client results in stuttering character on others' screens
* move the dim/4 stuff to the preview block build call, not draw
* fix memory leaks
* put the xCom classes into their own folder
* make it so you have separate "waypoint-WITH-arrow" and "waypoint-WITHOUT-arrow"
    -> so we don't have explicit checks for virus mode in the "drawWaypoints" function
* git reset --hard <last_working_commit_id>
    -> git push --force
    -> git push --set-upstream origin <branch_name> --force
    -> see for remotes: git reset --hard origin/<branch_name>
* NET: Have server not send any other clients' vars if the client is still loading
* NET: The maximum safe UDP payload is ??? bytes
* WEAPONS: send a holdingmouse netvar when holding mouse
    -> clients will simulate the fire rate
        --> server holds master state still
    -> instead of sending cmd fireweapon
    -> allows smooth use of automatic weapons
* add zombies gametype, a zopmbie will be a prop
* powerup idea
    -> egg, pick up to initiate the growing sequence
    -> chuck or drop it before it blows
* gametype
    -> bot going after nearest character
        --> if you touch the bot you die
        --> get points for staying alive
* ATTACK: the rock from gungame
    -> have it be wildly inaccurate
* GAME: bring back squish effect for something
* GAME: in virus, give players infinite ammo
    -> infected have boxing glove
    -> survivors have shotguns
* new Item: bonusblock
    -> (make them look like regular blocks)
    -> get its health to 0 and it has a change to spawn a powerup
        --> powerups: small mode, big mode, shotgun(?), bigger rock, fire rate ++, health++
        --> this will be the powerup delivery system.  no placing shotties on map, etc
    -> will respawn after X time
* Interesting attack:
    -> hold mouse to increase size of projectile
    -> click mouse to start blowing up a bubble. click again to launch it before it pops
        --> can get a bigger bubble, skillfully make small ones etc
* other attack:
    -> rock lazily flies for a time
        --> stopped/bounces by walls/players
    -> explodes on a timer
    -> right click could leave a bomb at player loc, left click launches it
* FUTURE: we can make "themes" for prefabs
* make players bounce off each other
    -> if a player is slower than another, make them take more and the other take less force accordingly
* add ball skins
    -> use existing color architecture
* avoid casting from WIDE scope to NARROWER scope as it introduces overhead
* cant have key bound to multiple actions
* COMMIT SPOT CHECKS
    -> GO TO COMMIT: git checkout <commit>
    -> GO BACK: git checkout <branch_name>
* make sure different timezones and computer times work correctly
* BG MUSIC TRACK/PLAYING CLIPS NEED TO CHANGE VOLUME IMMEDIATELY ON CHANGE
* gungame mode
* add "disable attacks" option
* checksum checks
    -> in a real game, would represent official vs "community" content/experiences (halo custom edition)
    -> client sends checksum of the jar, map file, and scripts currently played
    -> server verifies these two MD5 hashes against its own md5s
* make players eyes blink
* Create a server browser program
* add voip