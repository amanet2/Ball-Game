///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////                                                                 /////////////////////////////////
                                                ==ISSUES==
/////////////////////                                                                 /////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
20210216
* made death explosion play for all clients
* added "you have been kicked" message to the server kick process
* server doesnt respawn automatically after dying
* client occasionally dies the way it should othe times it tracks view to graveyard
* working on migrating user-centric code from cScripts for playerdeath into xComDamagePlayer for server to tell client
* re-introduce the ability to do "THING_PLAYER.X.doThing" bcause now the server can tell the userPlayer what to do
and what coords to have
* instead of nVars ever becoming null I always make it a new hashmap
* added userplayer nullcheck in dHud
20210215
* think about an int code for client/server so your avoid if/else
    -> the switch/case can be useful, DEFAULT will be offile/mapeditor instance
* see about an architectur where every console command can have nServer.sendCmd(fullCommand) in it
* dont spawn a player until proper connection and comms established with server
    -> server will spawn the player's character
* commented out the weaponsprite stuff in checkSpriteFlip()
* client player death needs to happen server side
    -> if client is not "alive", ignore their coord updates and substitute your own
    -> gonna have to find a way for the client to sync the server's coords with its own
        -> maybe it will be like the way smoothing works, but update to the argsmap coords instead of their own
* for the server to "say" something to clients, "echo" the proper string (with or without "name:" ) in sendCMD
* debug issue of client loading into mainmenu then losing server
    -> what exactly happens on client join?
    -> broken in "remove old kick system" commit
* server "kick" shouldnt require a msg being sent over network
    -> have ignoreIDList where all the ids we want to ignore in network will be
    -> remove ids from the list depending on the length of the ban we want
    -> "kick <id>" kicks id for 0 seconds
    -> "kick <id> -1" infinite (or game close)
    -> "kick <id> <val>" kicks for <val> millis
* we want to keep the logic that loads new map if map detected not the same as the previous one
    -> look in the PR
* when map changes, server says wrong name when bots "leave"
* use java gui elements for ui
    -> will make setting values for games a lot easier with drop-down menus, text boxes, etc
    -> or just fix the old system
        -> give people time limite with arrow keys from 1 to 15 minutes
            -> incorporate that into the menus system
* clients need to be able to sendcmd's as well
    -> or rather "request" a cmd be run by the server on a fan-out basis
        -> dont run their own cmd until the server sends it back to them?
* send "crouch" across network
* in client onread, shake camera if readstock is less than current userplayer stock
    -> dont update playerstocks unless ur the server
    -> client will read stockhp from server and set its userplayer with that stockhp
* max allowable server/client rate is 1000
* commented out hat and spawn protection
* strip game down to base elements and see whats sending/receiving over network
* sendcmd stuff needs to be improved
* make players bounce off each other
* removed weaponstatus stuff
* damageplayer not reaching everyone
    -> the receipt of sendcmds needs to be managed better, look at the soundfx and fireweapon
* spawnprotection should be on a per-player basis
* for new multiflag ctf use the flag's "str0" to store the former "flagmasterid"
    -> don't need a cvar for it if everything goes as planned
* think about returning a player's health from the server and reading/syncing it instead of having each client
call the "damageplayer" console function
* make respawn a console command taking an id
    -> send over net for player respawning
    -> client gets dmg updates but doesnt know when hes actually dead
    -> see where client gets put to the off-world coords though
* bot respawning is messed up bad but doesnt crash
* setting "gravity" to 0 needs to work as expected
* use "alive" server flag over net
    -> if client sees that they're not supposed to be "alive" they go invisible and camera remains free mode at last coords
* console command for spawn animation as well
* refactor cvars.respawntime into player
    -> also spawnprotectiontime
* use bot code for players
* cvar spawnprotection should be replaced with player spawnprotection
* replace cvars stockhp with players stockhp
* players must BOUNCE off other players
    -> if a player is slower than another, make them take more and the other take less force accordingly
* sendcmd commands need to append to eachother, so we can hold all possible actions that occur in a tick
    -> next work on console commands that will build up this architecture
        -> xComDamgePlayer
* try to have the server create bot shots as if reacting to a received packet
* gamemode where you chase a ball that runs away from you, but you explode when you touch it
    -> but it also respawns and gives you a point
* client never receives the "actionload" for bot firing
* make safezone so that you get +1 for each second in the safezone
    -> countdown to safezone change
    -> no more dying as a game mechanic
* bots shoot server side but not for clients
    -> find where server makes bot shoot and send the cmd string
* EDITOR: while in play, arrow keys dont control camera but still adjust quick dims
* new players joining virus need to be infected
* make jumps look better
    -> save ycoord for when jump happened and draw shadows there until jump not happening
* crousching not shown across net
* dont turn off flashlight on death?
* replace graveyard coords with "alive" flag
    -> using coord -9000 and -9000
    -> e.g. cGamelogic checkVirus
* boostups broken now
    -> just make them give a boost like the speedboost works
* replace objectsmap usage with more specific playersMap(), botplayersMap() etc
* any bounces occuring due to a vel0 vector need to have 2/3 modifier applied
* wasd shouldnt work in pause menu during a game
* bouncing off of stuff still feels too harsh
* look for //ugly if else markers in code
* messy //old props in cGameLogic, in 800s
* have a flag that sets to 1 when a player is finished constructing, do this check when we get random null crashes
    -> as I think the gfx has a race condition with the internal manager
* dont cancel W on jump
    -> jump needs to be fixed to not use mov0!
* add ball skins
    -> use existing color architecture
* gravity setting for maps
* EDITOR: select last placed thing automatically after placing new thing
* EDITOR: dim2 needs to change to match updated dim, when dim2 > 0
* if changing settings, msgs can screw it up
    -> tried setting "scorelimit" to "player has left the game"
* make tile object work like flare object loading into maps and saving
    ->gThingReturnTile
* code in editorPutProp needs to be stored in the prop object instead of switch case
* waypoints game mode doesnt show scorepoint for clients
* client cant score in safezones
* horrible crash when client wins deathmatch mode
    -> processActionLoadClient line 611
* client locks up and cant exit when loses connection to server, has to close cmd window
* scoreboard exception when client joins game now
* timeout negative-timeout sleep() exception
    -> nServer.run line 182
* clients need to show green +1s on their own screen
    -> watch scoremap.  if someone's score differs from last scoremap data, update cached score and spawn +1
* flag needs to drop at dead players feet in flagmaster
    -> ctf is more balanced the way it is
* for ctf, have multiple red flags spawn around the map, have a few equidistant blue flag "stations" to bring them to
    -> like a fuzion frenzy type thing
    -> need to accomodate multiple "flagmasterids"
* cut/copy/paste only works for tiles right now
    -> make generic copything() function maybe instead of copytile, copyprop, etc
* avoid casting from WIDE scope to NARROWER scope as it introduces overhead
    -> just specify the hasmap<KEY,VALUE> pairs you lazy bastard
    -> want to return to the flares(), teleporters(), etc lists, only now theyre backed by a quality data structure
* bot just shooting all over instead of waiting to be in range
* mapmakers gotta be verified heavily
* trying to start a new game with spawn-armed and reloading crashes
* why is the currentmap NULL on first load when this wasnt happening before
* gamemodes need to have a subclass structure like the props do
    -> theyll have "pre-gameloop-check" and "post-gameloop-check" functions
* have bots eventually go back to exit teleporter after X seconds
* save old functions to aid in rebuilding the broken functionality
* goToNearestThing() function has explicit reference to flagmaster stuff
* get rid of the scorepoints() array in the cGameLogic file
* get rid of bouncy ball
    -> for now
* bouncy ball broken
* make capture the flag mode have several red flags so that multiple players can grab and bring to the blue flag
* get rid of the ladder prop
* make sure propmap id pointers are dereferenced/removed along with the arraylist
* add zombies gametype, a zopmbie will be a prop
    -> how many ID:coord:coord:attack sets can we cram in a send string
* what the hell happened to the light fixture prop?
    -> they used to be prop 1
    -> i guess since we dont do sidescroller maps anymore it shouldnt be an issue
* all powerup cycle at same time
    -> each powerup should have its own timer, and be longer (like halo weapons despawning)
* bots not dropping weapons
    -> actually they never dropped their weapons even in the old branches
* consider making HASHMAPS of all the current proplists, would make looking up a prop by id an O(1) op
* flags work off of a seperate server-side collision detection
* put all static ints for props in the map file
* king of flags needs a new architecture
* make sure all maps in maps_b folder work with new props
* prop sprite string needs to be made a var of the prop object/subclass
* gMap.load has a giant if/else block
    -> convert to a map of doables, or something... at least use the console commands this time
* logic drawing navpointers is a huge if/else block
* make sure editing and saving a map works with the new prop architecture
* show grey bar on bottom 1/4 of screen, with gametype and description for first 10 seconds of player joining
* make sure props spawn and clear without memory leaks
* audit graphics and sounds to remove anything not made by (you)
* refactor maps to use new prop architecture while slowly removing the old functionality
* player_ids is the last good branch before i started gutting the weapons and props functionality
* refactor props to not rely on so many ifs
    -> use inheritance instead of the "code"
    -> should have basic function like the propeffect() function
* reloading isnt working no more
* changing resolution screws up corner tiles & powerups
* figure a way to measure your functions for optimization
* incorporate enums where possible
    -> replace weapon_selection with weaponSelection()
* why does cGameLogic.getMovementStatus() have a double for-loop for all ids
* need sound effects for hitting sorepoints, capping flags, surviving safezones, grabbing flags, completing laps
* player should drop flag in flagmaster, but ctf shoud go back to starting spot
* introduce functions like getScorepoints(), getWeapons() similar to the basic getProps() function in gScene
* cant have key bound to multiple actions
* mapfile prop line and editor_put_prop console comm can be combined
* too much sent in new powerups string
* make sure the combinations of spawn-armed and allow-reload modes work correctly together
* verify integrity of fps counter
* COMMIT SPOT CHECKS
    -> GO TO COMMIT: git checkout <commit>
    -> GO BACK: git checkout <branch_name>
* make sure different timezones and computer times work correctly
    -> client timeout: systemtime has a chance of always being greater than checkin time by a magnitute of <timeout>
        -> due to timezones, system clock etc
    -> $$$ make timestamp-centric operations happen server-side, as usual, to fix these issues $$$
* bots wont go for flag in kof if another bot owns that flag
* I think the first sent packet from the client has a chance of sending garbage for velocities and movedirs b/c a player isnt spawned yet
* only draw gfx that will be seen
* sounds are dragging down performance
    -> was better when javafx wasnt working
* bots really drag down performance
    -> check if the rates are influencing it.  maybe bots are updating at server rate and dragging down performance
* EDITOR - NEWTILE - dim0h didnt change when setting base dims
* find a way to change corner's "wall height"
* Bot dont explode on other clients screen
* EDITOR: texture not included when copying/injecting tile dimensions
* many cvars need to be changed to a each-player var for the sake of future usability
    -> features like BOTS and perhaps split screen multiplayer
* need to restrict certain console commands if a client is playing
    -> 'addbot' and many more to be sure
* editor: sidescroller block size did not change dim6h during quick dim adjustment (arrow keys)
* ISSUE: BULLETS AND ANIMATIONS CAUSE GAME TO STUTTER ON FIRST EXECUTE B/C NOT IN IMAGE MAP YET
* ISSUE: SERVER NOT GOING TO THE PROPER COORDS AFTER DYING, AFTER A CLIENT QUITS
    -> java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2
               at cScripts.createDamagePopup(cScripts.java:529)
               at cScripts.checkProjectileSplashes(cScripts.java:459)
               at cGameLogic.checkForPlayerDeath(cGameLogic.java:732)
               at cGameLogic.customLoop(cGameLogic.java:49)
               at uiInterface.startTicker(uiInterface.java:51)
               at uiInterface.startNew(uiInterface.java:97)
               at xMain.main(xMain.java:7)
   -> doing calls like matchKills[getInt("tag")] dont work because tags arent changed when ppl quit
* CRASH: handle characters who are it/viral quitting
    -> virus: remove player from the virus state string, if nobody infected after quit then re-assign virus
    -> tag: re-assign "itness"
* EDITOR: Tighten up the undo/redo
* BG MUSIC TRACK/PLAYING CLIPS NEED TO CHANGE VOLUME IMMEDIATELY ON CHANGE





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////                                                                 /////////////////////////////////
                                                ==FEATURES==
/////////////////////                                                                 /////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
* refactor mapfile so you can create objects with the kind of flexibility of hashmaps
    -> obv this means json
    -> obv this means everythings fucked
* consider reverting flares to arraylist, i cant think of needing to look em up by id
* give the victim a boxing glove in victim mode
* map where a scorepoint runs away from the nearest player and player explodes when catches it, but gets a point
* map with winding maxze structure that travels downwards with scorepoints
    -> watch which path you take or you can fall out the bottom of the map
* add buttons, like in the nuke map in day of defeat
    -> red square with flare like weapon highlight.  turn to green whenn player goes over
        -> need to have doables attached to the button
* maps should have a flag (cvar) for bots to use flashlights on the map
* put little representation of the lead character next to the leader string
    -> draw <leader>.sprite (mini style) also draw <leader>.hat mini style
        -> facing the right
* turn individual powerups on and off in new game menu
* adjust player speed in new game menu
* add player speed and other cool vars to the newgame screen, and send as cvar over net
* bouncy ball mode
    -> ball will change color of last touching person
        -> when it goes in a goal it respawns at start and give point
        -> have multiple balls on the field
* gungame mode
* spawning under "unarmed" mode then enabling armed mode gives all weapons with 0 stock.
    -> modify changeweapon function to skip empty guns
        -> will work like max payne where you have all guns but cant switch until you get some ammo
* enable spectate mode for online matches
    -> player stays in graveyard
    -> always tracks the tracking id
    -> use mouse wheel to cycle through tracking ids available (excluding dead and self)
* put a mini version of the character next to name in scoreboard
* make two race modes -> linear and nonlinear
* for flag king, maybe put a little representation of the person owning the flag on the flag or in the flagstring
* maybe have the console display always show if debug is 1
    -> don't put the dark gray overlay on top of the view
* start showing errors in debug log now
* mapmaker
    -> ctrl+click to highlight multiple tiles (maybe click & drag to create a rectangular zone?)
    -> have option in the tile menu to "move tile group"
        -> only give ability to edit x,y coords for now
        -> build up to copy/past tile group
        -> also build up to "transform/flip" tile group
* find a way for player vector and corner steepness to effect eachother
    -> prolly dont need to
* make it so teleporters can be configured to retain fv of player, or if the fv needs to be set to a certain value
* powerup idea
    -> egg
    -> pick up
    -> do something to initiate the growing sequence
    -> chuck it before it blows, or drop it
* reintroduce powerups, would function the way weapons used to
    -> powerup spawn points have 0/1 switch, present a random powerup
    -> on-fire like bomberman (touch ppl, they die)
    -> tiny and fast
    -> big slow and shielded
* be sure to make as many variant maps for the different gamemodes
* add "disable attacks" flag
    -> would only be fun in specific gamemodes
    -> could be a map string
* add ability for map to have a sound play on each score
    -> would be manually exec'd with a line
    -> integrate into mapmaker as well
* Add ability to reset game to default settings
* maybe allow a creation mode so ppl can edit the map in multiplayer
    -> like forge
    -> simply pass along the console command to place a tile over the network and run it on the other side
    -> could be fun
* move tile down 1 layer seems lame.
    -> replace with put_tile_at_layer
        -> will just remove/reinstert tile at index in array
            -> where N is new index, if N > size, then do size instead
            -> where N is 0 or below, just put at 0
            -> all orginal tiles m (>N) become m+1
* need to see a visual pallette for selecting tiles
* implementing search algorithms for ai
    -> use stack and dfs w/ heuristic (heuristic affects ordering of enqueueing tuples)
    -> enqueue tuples of coorx,coory a certain distance from current loc in each dir (like a grid)
        -> function should take a x,y, pair and return 4 candidate pairs (1 each dir)
* make the powerups float up and down and have a shadow
* change "thetime" to have the server "say" the time after receving proper msg
* server could have a "admin" role where you can use the mapmaker
    -> actions taken by the admin broadcast to all players
        -> e.g. deleted a powerup, added a tile
* checksum checks
    -> client sends checksum of the jar, and the map file currently played
    -> server verifies these two MD5 hashes against its own md5s
* allow players to bounce off floor in sidescroller mode
    -> make a plinketto game mode
    -> scorepoints at the bottom
        -> more scorepoint props placed in the better slots
    -> have the scores in the textures for the map
        -> e.g. 5, 3, 10
* not how the spawn points have illusion of depth on wp_steam sometimes
    -> black line on top, light line on bottom
*create didicated spawn point object
    -> so they can be easily referenced when needed
    -> no more spawn errors at all
* create customTrigger object
    -> like xCom
        -> just needs to execute code
    -> have map of these objects
    -> add prop that has a string for the key of customTrigger map
        -> on intersect/destroy run the customTrigger
* gametype
    -> ball thinks like a bot, going after nearest character
        -> if you touch the ball you die
        -> get points for staying alive
*  cut down on data usage online, see if instead of using full keys, if you can use their index in the arg map
to reference them.
* replace stockhp
    -> replace all cVars usage of stockhp with calls for player0's stockhp
    -> then refactor functions to take any player not just 0
* need more vars on player and not in cvars
    -> like health
    -> handle respawns by player obj, not by user
* as a bot on sideview map, look for edges of platforms above yourself for the opportunity to jump
* make players eyes blink
* allow all textures in folder to be used in mapmaker
* new gametypes
    -> sidescrolling map scrolls past with obstacles to jump and duck
        -> like twisted system in fuzion frenzy
    -> current pulling players in one dir, where death awaits at the edge and objects try to knock you in
        -> like the jetboat waterfall in fuzion frenzy
    -> pool game mode where you try to knock ball into one of six pockets
        -> maybe only one ball/goal active at any one time
            -> scoring will change the active goal
        -> have only 4 spawn points on the map.  each spawn points gives player access to a full table
            -> players will be separated by hard walls
    -> have N-1 props each cycle where N is # players left.  players grab props but drop them when killed
        -> when timer ends anyone not holding prop dies
    -> have multiple flags each cycle.  players grab flags but drop them when killed
        -> when timer ends anyone not holding flag dies. survivors get points
    -> have N-1 safepoint each cycle where N is number of players left.  No respawning, only 30 - 60 sec allowed
* new weapons
    -> add a bomb type that functions like the bomberman64 bomb
    -> something like the rock from dod mg server
        -> bounces around and flies far and erratically
    -> jihad
* new props
    -> for race mode, bombs that explode on contact and stop you for a little
    -> pinball bumper that actual increases your bounce velocity
* idle sfx
    -> have music for background of match.
    -> loop a roylaty-free mp3
    -> reference the mp3 in mapfile or whatever
    -> have characters make chirpy muttery noises
        -> kinda like grunt from halo
    -> have them respond to events in the game
        -> deaths, objectives, etc
    -> have them grunt for punching
        -> like bomberman64
* new map lines:
    -> lockcam x y
    -> locks cam at a certain coordinate for duration of the map.
        -> no center cam, no free cam
        -> check in the commandCenterCam and commandSelectUDLR files
    -> lockscale s
        -> locks game scale at certain level for the duration of the map
        -> no zooming allowed
* add texture tiling
    -> sprite must be converted to bufferedimage before drawing
    -> on a per texture basis i.e. 3 "fill or tile" flags per tile
    -> add 7 base x/y vals for possibly tiled textures
* Create a server browser program
    -> when you start a game server it sends data to this server
    -> when you go to server browser menu in game you see data returned from here
* change vector of speed boost (RMB) depending on movement keys held down
* put visual feedback for racing positions
* add voip
* Load all images used on a map into a temp. sprite sheet to improve performance?
* ENABLE A "GRAVITY" SETTING TO PULL PLAYERS IN CERTAIN VECTOR
    -> MUST BE ABLE TO SET IT FROM MAP FILES
* TRIM THE FAT ON THE "NEW TILE/PROP/FLARE" OPTIONPANES
    -> LOOK AT THE FILE HISTORY OF RELEVANT FILES IN GITHUB
* server should have clients run a set of instructions on join
* transmit file over the server/cli connection
* next game better have rotating map in both gameplay and editor